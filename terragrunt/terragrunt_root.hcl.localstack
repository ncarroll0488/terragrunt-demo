locals {
  // This is always 12 zeros on localstack
  aws_account_id = "000000000000"

  // Determine necessary region, and environment-level variables from their corresponding HCL files
  region_vars      = read_terragrunt_config(find_in_parent_folders("region.hcl"))
  environment_vars = read_terragrunt_config(find_in_parent_folders("env.hcl"))

  // This will be necessary
  aws_region       = local.region_vars.locals.aws_region
  environment_name = local.environment_vars.locals.environment_name
  // aws_endpoint     = get_env("AWS_ENDPOINT_URL", "127.0.0.1:4566")

  // This will be the path between the root and the leaf terragrunt.hcl. This is tagged to all resources automatically, and makes it easier to find exactly which config file provisions a resource.
  auto_tag_tg_leaf = path_relative_to_include()

  // This overrides the name of the lock table. You probably don't need to change this.
  dynamodb_lock_table = get_env("DYNAMODB_LOCK_TABLE", "terraform-locks")

  // This is the path of the terraform module source directory.
  // The name of the module ("vpc" for instance) will be appended to it in the leaf configuration
  module_source_path = get_env("TG_MODULE_SOURCE", "git::https://github.com/ncarroll0488/terraform-modules.git//src/aws/")

}

// Generate an AWS provider block
generate "provider" {
  path      = "provider.tf"
  if_exists = "overwrite_terragrunt"
  contents  = <<EOF
provider "aws" {
  region                      = "${local.aws_region}"
  access_key                  = "mock_access_key"
  s3_use_path_style           = true
  secret_key                  = "mock_secret_key"
  skip_credentials_validation = true
  skip_metadata_api_check     = true
  skip_requesting_account_id  = true

  // Localstack configuration
  profile                  = "localstack"
  shared_config_files      = ["${get_parent_terragrunt_dir()}/.aws.localstack.conf"]
 
  // Automatically add tags. This saves us having to explicitly support tags in every module.
  default_tags {
    tags = {
      TERRAGRUNT_ENV     = "${local.environment_name}"
      TERRAGRUNT_LEAF    = "${local.auto_tag_tg_leaf}"
    }
  }
}
EOF
}

// Add some default outputs to all terraform modules. This information helps simplify adding some resources.
// For instance, an AWS VPC peering connection needs both pieces of information.
generate "default_outputs" {
  path      = "__tg_default_outputs.tf"
  if_exists = "overwrite_terragrunt"
  contents  = <<EOF
output "__aws_region" {
  value = "${local.aws_region}"
  description = "Region of this module"
}
EOF
}

// Previously, account, environment, and region HCLs were merged as inputs here.
// With modern versions of terragrunt, the leaf can reference specific members of these objects by referencing the
// object 'include.root.locals.some_local_value'. This makes for cleaner leaf configuration and less boilerplate.
//
// If there are any inputs which should be applied to *every single* leaf, add them here but this is not recommended
// as it leads to unexpected behavior. You can merge (left-to-right, or to-to-bottom) any number hashes, either by
// reference or explicitly
/*
inputs = merge(
  locals.some_hash,
  locals.another_hash,
  {
    key1 = "val1"
    key2 = "val2"
    key3 = somefunction(val3)
  }
)
*/




/*

 endpoints {
    sts = "http://localhost:4566"
 }


*/
